#funtion
#palindrome.sh
#!/bin/bash 
 
 
 # Write a function to check if the two numbers are Palindromes 
 
 
 function palindrome() { 
 	rev=0 
 	number=$num 
 
 
 	while [ $num -gt 0 ] 
 	do 
 		rem=$((num % 10)) 
 		rev=$((rev * 10 + rem)) 
 		num=$((num / 10)) 
 	done 
 
 
 	if [ $rev -eq $number ] 
 	then 
 		echo "$number is a palindrome" 
 	else 
 		echo "$number is not a palindrome" 
 	fi 
 } 
 
 
 echo "Enter number" 
 read num 
 
 
 result=$( palindrome $num ) 
 echo "$result" 
#prime palin.sh
#!/bin/bash 
 
 
 # Take a number from user and check if the number is a Prime then show that its palindrome is also prime 
 #  a. Write function check if number is Prime 
 #  b. Write function to get the Palindrome. 
 #  c. Check if the Palindrome number is also prime 
 
 
 function prime_num() { 
 	f=0 
 	 
 	for (( i=2; i<=$(( number / 2 )); i++ )) 
 	do 
 		if [ $(( number % i )) -eq 0 ] 
 		then 
 			f=1 
 		fi 
 	done 
 
 
 	if [ $f -eq 1 ] 
 	then 
 		echo "$number is Not a Prime number." 
 	else 
 		result=$( palindrome $number ) 
 		echo "$number is a Prime number $result" 
 	fi 
 } 
 
 
 
 
 function palindrome() { 
 	rev=0 
 	num=$number 
 
 
 	while [ $number -gt 0 ] 
 	do 
 		rem=$((number % 10)) 
 		rev=$((rev * 10 + rem)) 
 		number=$((number / 10)) 
 	done 
 
 
 	if [ $rev -eq $num ] 
 	then 
 		echo "and also a palindrome" 
 	else 
 		echo "but not a palindrome" 
 	fi 
 } 
 
 
 
 
 read number 
 result=$( prime_num $number ) 
 echo "$result" 


#temp conversion.sh
#!/bin/bash -x 
 
 
 #Help user find degF or degC based on their Conversion Selection. Use Case Statement and ensure that the inputs are within the  
 #Freezing Point (0 °C / 32 °F ) and the Boiling Point of Water ( 100 °C / 212 °F ) 
 #a. degF = (degC * 9/5) + 32 
 #b. degC = (degF – 32) * 5/9 
 
 
 echo "Enter Temperature" 
 read temp 
 echo "Type C: convert celcius to farenheit" 
 echo "Type F: convert farenheit to celcius" 
 read degr 
 
 
 
 
 function cel_to_far() { 
 	echo $((temp*9/5+32)) 
 } 
 
 
 function far_to_cel() { 
 	echo $(((temp-32)*5/9)) 
 } 
 
 
 
 
 case $degr in 
         C) 
             if [ $temp -ge 0 ] || [ $temp -le 100 ] 
             then 
                  result=$( cel_to_far $temp ) 
 				 echo "$temp C converted to $result F" 
             fi 
             ;; 
 		F) 
             if [[ $temp -ge 32 || $temp -le 212 ]] 
             then 
                  result=$( far_to_cel $temp ) 
 				 echo "$temp F converted to $result C" 
             fi 
             ;; 
 esac 


#repetition pp for
#count prime.sh
#!/bin/bash 
 
 
 #Extend the program to take a range of number as input and output the Prime Numbers in that range. 
 
 
 echo "First no. should be smaller than second no." 
 read a 
 read b 
 for (( i=$a; i<=$b; i++ )) 
 do 
 	 
 	f=1 
 	for (( j=2; j<=$(( i / 2 )); j++ )) 
 	do 
 		if [ $(( i % j )) -eq 0 ] 
 		then 
 			f=0 
 		fi 
 	done 
 
 
 	if [ $f == 1 ] 
 	then 
 		echo "prime number are $i" 
 	fi 
 done 


#factorial.sh
#!/bin/bash 
 
 
 #Write a program that computes a factorial of a number taken as input. 5 Factorial – 5! = 1 * 2 * 3 * 4 * 5 
 
 
 echo "Enter number" 
 read num 
 
 
 fac=1 
 for (( i=1; i<=num; i++ )); 
 do 
 	fac=$(( fac*i )) 
 done 
 echo $fac 


#harmonic.sh
#!/bin/bash 
 
 
 #Write a program that takes a command-line argument n and prints the nth harmonic number. 
 
 
 echo "Enter number" 
 read num 
 
 
 harmonic_exp=0 
 for ((i=1; i<=num; i++)); 
 do 
 	x=`echo $i | awk '{print 1/$1}'` 
 	harmonic_exp=`echo $harmonic_exp $x | awk '{print $1 + $2}'` 
      
 done 
 echo $harmonic_exp 

#power.sh
#!/bin/bash 
 
 #Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n. 
 
 
 read n 
 power=2 
 sum=0 
 for (( i=1; i<=n; i++ )) 
 do 
 	echo "2^"$i "=" $power 
 	power=$((2*power)) 
 	 
 done 


#prime factor.sh
#!/bin/bash 
 
 
 #Write a program to compute Factors of a number N using prime factorization method. 
 
 
 echo "Enter an integer:" 
 read input 
 if [ $input -lt 1 ] 
 then 
 	echo "Not valid" 
 	exit 1 
 fi 
 
 
 
 
 count=0 
 flag=0 
 array=() 
 
 
 echo "Prime factors of $input are: " 
 for (( i=2; i<$input; i++ )) 
 do 
 	if [ $(( input % i )) -eq 0 ] 
 	then 
 		factor=$i 
 
 
 		for (( j=2; j<=`expr $factor / 2`; j++ )) 
 		do 
 			flag=0 
 			if [ `expr $factor % $j` -eq 0 ] 
 			then 
 				flag=1 
 				break 
 			fi 
 		done 
 		 
 		if [ $flag -eq 0 ] 
 		then 
 			echo "$factor" 
 			array+=($factor) 
 			count=1 
 		fi 
 	fi 
 done 
 
 
 if [ $count -eq 0 ] 
 then 
 	echo "no prime factors found" 
 fi 

#prime num.sh

#!/bin/bash 
 
 
 # Write a program that takes a input and determines if the number is a prime. 
 
 
 read number 
 
 
 f=0 
 
 
 #running a loop from 2 to number/2 
 for (( i=2; i<=$(( number / 2 )); i++ )) 
 do 
 	if [ $(( number % i )) -eq 0 ] 
 	then 
 		f=1 
 	fi 
 done  
 
 if [ $f -eq 1 ] 
 then 
 	echo "$number is Not a Prime number." 
 else 
 	echo "$number is a Prime number." 
 fi 

#repetition pp while
#coin.sh

#!/bin/bash +x 
 
 
 #Extend the Flip Coin problem till either Heads or Tails wins 11 times. 
 
 
 head=1 
 tail=1 
 
 
 while true 
 do 
 	FLIP=$(($RANDOM%2)) 
 	 
 	case $FLIP in 
 		0) 
 			if [[ $head -eq 11 ]] || [[ $tail -eq 11 ]] 
 			then 
 				break 
 			else 
 				echo "HEADS" $head $FLIP 
 				head=$((head+1)) 
 			fi;; 
 			 
 		1) 
 			if [[ $head -eq 11 ]] || [[ $tail -eq 11 ]] 
 			then 
 				break 
 			else 
 				echo "TAILS" $tail $FLIP 
 				tail=$((tail+1)) 
 			fi;; 
 	esac 
 done 
 
 
 if [ $head -gt $tail ] 
 then 
 	echo "HEADS Won" 
 else 
 	echo "TAILS Won" 
 fi 

#power table.sh

#!/bin/bash 
 
 
 #Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n till 256 is reached.. 
 
 
 read n 
 
 
 power=1 
 i=1 
 
 
 while (( $i <= $n )) 
 do 
 	if [ $power -gt 256 ] 
 	then 
 		break 
 	else 
 		echo "2^"$i "=" $power 
 		power=$((2*power)) 
 	fi 
 	 
 	i=$((i+1)) 
  done
